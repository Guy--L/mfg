@model Test.Models.SampleView

@{
    ViewBag.Title = "Sample";
}

<div class="container">
    @using (var form = Html.Bootstrap().Begin(new Form("SaveSample", "Home").Id("tsampleform").LabelWidthXs(3).Type(FormType.Inline)))
    {
        @Html.HiddenFor(m => m.t.SampleId)
        @Html.HiddenFor(m => m.t.LineId)
        @Html.HiddenFor(m => m.t.ParameterId)
        @Html.HiddenFor(m => m.r.ReadingId)

        <div class="row-fluid">
            <div class="col-md-12 text-primary">
                <h3>@(Html.Raw(Model.t.SampleId == 0 ? "<i class='fa fa-plus'></i> Add " : "<i class='fa fa-pencil'></i> Edit ")) Sample</h3>
            </div>
        </div>
        <div class="row-fluid">
            <div class="col-md-3 text-primary" id="linedisplay">
            </div>
            <div class="col-md-3 ">
                @Html.Label("Line:")
                <table class="table table-condensed table-responsive table-hover table-no-border linepick">
                    <thead><tr><th>Unit/Line</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead>
                    <tbody>@Html.DisplayFor(m => m.grid, "LineGrid")</tbody>
                </table>
            </div>
            <div class="col-md-offset-1 col-md-3">
                @Html.Label("Sample Type:")
                @Html.DisplayFor(m => m.pending, "SampleType")
            </div>
        </div>
        <div class="row-fluid sampledetail">
            <div class="col-xs-12">
                <div class="panel">
                    @form.FormGroup().TextBoxFor(m => m.t.ReelNumber).Label().LabelText("Reel")
                    @form.FormGroup().TextAreaFor(m => m.t.Note).Label().LabelText("Comment")
                    @form.FormGroup().TextBoxFor(m => m.t.Tech)
                </div>
            </div>
        </div>
        <div class="row-fluid sampledetail">
            <div class="col-md-12">
                <div class="panel">
                    @form.FormGroup().TextBoxFor(m => m.r.R1).Class("rdg").Placeholder("1st").Label().LabelText("Reading")
                    @form.FormGroup().TextBoxFor(m => m.r.R2).Class("rdg").Placeholder("2nd").Label().Class("sr-only")
                    @form.FormGroup().TextBoxFor(m => m.r.R3).Class("rdg").Placeholder("3rd").Label().Class("sr-only")
                    @form.FormGroup().TextBoxFor(m => m.r.R4).Class("rdg").Placeholder("4th").Label().Class("sr-only")
                    @form.FormGroup().TextBoxFor(m => m.r.R5).Class("rdg").Placeholder("5th").Label().Class("sr-only")
                    @form.FormGroup().TextBoxFor(m => m.r.Average).Class("avg").Readonly().Label().LabelText("Avg")
                </div>
            </div>
        </div>
    }
</div>
@section scripts{
    <script type="text/javascript">
        $(function () {
            var hub = $.connection.lineHub;
            $('.sampledetail').hide();
            $.connection.hub.start();
            $('#cancel').on('click', function (e) {
                e.preventDefault();
                location.href = '@Url.Action("Samples", "Home", null, Request.Url.Scheme)';
            });
            $('#savesample').on('click', function (e) {
                $(this).addClass('disabled');
            });
            $('#@Html.IdFor(m=>m.t.Tech)').inputmask("AA");
            $('#@Html.IdFor(m=>m.t.ProductCodeId)');
            $('table.linepick i').on('click', function () {
                var $i = $(this);
                if (!$i.hasClass('text-primary')) return;
                $('i.text-danger').removeClass('text-danger').addClass('text-primary').removeClass('fa-circle').addClass('fa-circle-o');
                $i.removeClass('text-primary').addClass('text-danger');
                $i.removeClass('fa-circle-o').addClass('fa-circle');
                $('#@Html.IdFor(m=>m.t.LineId)').val($i.data('id'));
                $('#linedisplay').html($i.data('name')).fitText(0.2);
                hub.server.nextSamples($i.data('id')).done(function (list) {
                    $.each(list, function (i, t) {
                        $('tr.typerow td#' + t.ParameterId).html('<b>'+t.NextScheduled.substr(11, 5)+'</b>');
                    });
                });
            });
            $('table.samplepick tr').on('click', function () {
                var id = $(this).data('id');

                $('@Html.IdFor(m=>m.t.ParameterId)').val(id);
                $('label[for="@Html.IdFor(m=>m.r.R1)"]').html(types[id-1].TypeName + types[id-1].Units);
                $('input.rdg').inputmask(types[id-1].Mask);
                $('tr.text-danger', $(this).closest('table')).removeClass('text-danger').addClass('text-primary').find('td:first').html('');
                $(this).closest('tr').removeClass('text-primary').addClass('text-danger').find('td:first').html('<i class="fa fa-2x fa-play"></i>');

                $('.sampledetail').show();
            });
            $('#linedisplay').html('Pick a Line <i class="fa fa-hand-o-right"></i>').fitText(1);
        });
        var types = @Html.Raw(Json.Encode(Model.types.Values));
    </script>
}