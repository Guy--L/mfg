@model Test.Models.LineView
@{
    ViewBag.Title = "Modify Line "+Model.line.Name;
    Layout = "~/Views/Shared/_Layout2.cshtml";
    List<IHtmlString> buttons = new List<IHtmlString>() {
            Html.Bootstrap().SubmitButton().Text("Save").Id("saveline").Style(ButtonStyle.Success),
            Html.Bootstrap().SubmitButton().Text("Cancel").Id("cancel").Style(ButtonStyle.Default)
    };
    var current = Math.Abs(Model.when.Hour - DateTime.Now.Hour) < 8;
    var pending = (Model.conversions != null && Model.conversions.Count() > 0 && current);
}

@helper ButtonGroup()
{
    using (var g = Html.Bootstrap().Begin(new ButtonGroup()))
    {
        <div class=btn-group>
        @foreach(var b in Model.statuses)
        {
            @g.Button().Data(new { id = b.StatusId }).Class("linebtn btn-" + b.Color).Text(b.Pretty(Model.line.StatusId == b.StatusId))
        }
        </div>
    }
}
<div class="container">
    @using (var form = Html.Bootstrap().Begin(new Form("SaveLine", "Control").Id("lineform").Type(FormType.Horizontal).LabelWidthMd(2)))
    {
        @Html.HiddenFor(m => m.line.LineId)
        @Html.HiddenFor(m => m.line.UnitId)
        @Html.HiddenFor(m => m.line.LineNumber)
        @Html.HiddenFor(m => m.line.StatusId)

        <div class="row">
            <div class="col-md-12 text-primary"><h3>Modify Assignment of @Model.line.Name</h3></div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <table id="lineactivity" class="table table-striped table-hover table-condensed table-bordered">
                    <thead>
                        <tr>
                            <th colspan="6">Pending <span class="text-success">and Recent</span> Line Activity</th>
                        </tr>
                        <tr>
                            <th>Status</th>
                            <th>Product</th>
                            <th>Time</th>
                            <th>Note</th>
                            <th>Id</th>
                            <th><i>Action</i></th>
                        </tr>
                    </thead>
                    <tbody>
                        @Html.DisplayFor(m => m.timeline)
                    </tbody>
                </table>
            </div>
        </div>

        <div class="row">
            <fieldset class="time-context"><legend></legend>
            @form.FormGroup().TextBoxFor(m => m.when).Label().LabelText("Effective")
            @form.FormGroup().RadioButtonListFor(
                    m => m.line.SystemId,
                    m => m.systems,
                    s => s.SystemId,
                    s => s.Pretty).SelectedValues(
                    n => n.SystemId == Model.line.SystemId.Value).DisplayInlineBlock().Label().LabelHtml(new HtmlString("<i class='fa fa-2x fa-flask'></i> System"))
            </fieldset>
            @form.FormGroup().CustomControls(ButtonGroup()).CustomLabel("Status")
            @form.FormGroup().DropDownListFor(m => m.line.ProductCodeId, Model.productList).Size(InputSize.Large).Label().LabelHtml(new HtmlString("<i class='fa fa-2x fa-gift'></i> Product"))
        </div>
        <div class="row">
            @(form.FormGroup().CustomControls(buttons.ToArray()))
        </div>
    }
</div>
@section scripts{
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script type="text/javascript">
        var $when = $('#@Html.IdFor(m=>m.when)');
        $(function () {
            var hub = $.connection.lineHub;
            hub.client.setSystems = function (list) {
                var radios = $('.input-list-container');
                var item = radios.children().first();
                var label = item.attr('for');
                radios.empty();
                $.each(list, function (k, v) {
                    var nlabel = label.replace('0', k);
                    var litem = item.clone();
                    litem.attr('for', nlabel);
                    litem.children().first().attr('id', nlabel).attr('value', v.id);
                    litem.contents()[1].textContent = v.value;
                    radios.append(litem);
                });
            };
            $.connection.hub.disconnected(function () {
                setTimeout(function () {
                    $.connection.hub.start();
                }, 1000); // Re-start connection after 1 second
            });
            $.connection.hub.start();
            $when.datetimepicker({
                timepicker: true
            });
            $('button.linebtn').on('click', function (e) {
                e.preventDefault();
                var id = $(this).data('id');
                var statusfld = $('#@Html.IdFor(m => m.line.StatusId)');
                statusfld.val(id);
                $(this).addClass('active').siblings().removeClass('active');
                $('i.fa-check-square','#lineform').removeClass('fa-check-square').addClass('fa-square');
                $('i.fa-2x', $(this)).removeClass('fa-square').addClass('fa-check-square');
            });
            $('#cancel').on('click', function (e) {
                e.preventDefault();
                location.href = '@Url.Action("Lines", "Control", null, Request.Url.Scheme)';
            });
            $when.on('change', function (e) {
                hub.server.setLineTime($when.val());
            });
        });
    </script>
}

