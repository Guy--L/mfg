//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Test.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wed 07/29/2015 21:55:07.52 
        ///.
        /// </summary>
        public static string BuildDate {
            get {
                return ResourceManager.GetString("BuildDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [mesdb]
        ///GO
        ///
        ///SELECT t.[CasingTestId]
        ///      ,t.[LineId]
        ///	  ,(n.[UnitId]*10 + n.[LineNumber]) LineIndex
        ///      ,s.[System]
        ///      ,t.[ReelFt]
        ///      ,t.[Delm]
        ///      ,t.[WetWt]
        ///      ,t.[DryWt]
        ///      ,t.[GlyWetWt]
        ///      ,t.[GlyArea]
        ///      ,t.[GlySTD]
        ///      ,t.[OilArea]
        ///      ,t.[Oil]
        ///      ,t.[DateTime]
        ///  FROM [dbo].[CasingTest] t
        ///  	join [dbo].[System] s on t.[SystemId] = s.[Systemid]
        ///	join [dbo].[Line] n on t.[LineId] = n.[LineId]
        ///	order by t.[DateTime] desc
        ///GO.
        /// </summary>
        public static string CasingTests {
            get {
                return ResourceManager.GetString("CasingTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select top 3 Concentration, Area from OilSTD order by CasingGroupId desc.
        /// </summary>
        public static string LastOilSTD {
            get {
                return ResourceManager.GetString("LastOilSTD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT LineId ,
        ///       [Status] ,
        ///       LineTankId ,
        ///       UnitId ,
        ///       LineNumber
        /// FROM dbo.line
        /// ORDER by unitid, lineid.
        /// </summary>
        public static string LinesAll {
            get {
                return ResourceManager.GetString("LinesAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT LineId ,
        ///       [Status] ,
        ///       LineTankId ,
        ///       UnitId ,
        ///       LineNumber
        /// FROM dbo.line
        /// WHERE unitid = @0
        /// ORDER by lineid.
        /// </summary>
        public static string LinesByUnit {
            get {
                return ResourceManager.GetString("LinesByUnit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [dbo].[LineTest]
        ///            ([TimeStamp]
        ///            ,[TestGroupId]
        ///            ,[LineId]
        ///            ,[SystemId]
        ///            ,[StdSpeed]
        ///            ,[Computer]
        ///            ,[BeltSpeed]
        ///            ,[DryEndSpeed]
        ///            ,[ZoneA]
        ///            ,[ZoneB]
        ///            ,[ZoneC]
        ///            ,[WetDoorNumber]
        ///            ,[CasingTemp]
        ///            ,[Delm]
        ///            ,[CasingMoist]
        ///            ,[CasingGlyc]
        ///            ,[Gly]
        ///            ,[CMC]
        ///            ,[Cond]
        ///            ,[pH [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LineTestInsert {
            get {
                return ResourceManager.GetString("LineTestInsert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE [dbo].[LineTest]
        ///    SET [TimeStamp] =        &apos;{0}&apos; --  &lt;TimeStamp, datetime,&gt;
        ///        ,[TestGroupId] =      {1} --  &lt;TestGroupId, int,&gt;
        ///        ,[LineId] =           {2} --  &lt;LineId, int,&gt;
        ///        ,[SystemId] =         {3} --  &lt;SystemId, int,&gt;
        ///        ,[StdSpeed] =         {4} --  &lt;StdSpeed, int,&gt;
        ///        ,[Computer] =         {5} --  &lt;Computer, int,&gt;
        ///        ,[BeltSpeed] =        {6} --  &lt;BeltSpeed, int,&gt;
        ///        ,[DryEndSpeed] =      {7} --  &lt;DryEndSpeed, int,&gt;
        ///        ,[ZoneA] =          [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LineTestUpdate {
            get {
                return ResourceManager.GetString("LineTestUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to             SELECT b.[SolutionBatchId]
        ///                  ,b.[DateTime]
        ///                  ,b.[SolutionRecipeId]
        ///                  ,b.[OperatorId]
        ///                  ,b.[CoA]
        ///                  ,b.[SystemId]
        ///                  ,r.[SolutionType]
        ///				  ,s.[System]
        ///              FROM [dbo].[SolutionBatch] b
        ///              join [dbo].[System] s on b.[SystemId] = s.[SystemId]
        ///              join [dbo].[SolutionRecipe] r on b.[SolutionRecipeId] = r.[SolutionRecipeId]
        ///			  where b.[SolutionBatchId] = @0
        ///.
        /// </summary>
        public static string SolutionBatchById {
            get {
                return ResourceManager.GetString("SolutionBatchById", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT b.[SolutionBatchId]
        ///        ,b.[DateTime]
        ///        ,b.[SolutionRecipeId]
        ///        ,b.[OperatorId]
        ///        ,b.[CoA]
        ///        ,s.[System]
        ///		,b.[Completed]
        ///        ,r.[SolutionType]
        ///        ,ROW_NUMBER() OVER(PARTITION BY b.[SystemId] ORDER BY b.[DateTime] DESC) AS Row
        ///		,(select count(t.solutiontestid) from [dbo].[SolutionTest] t where t.SolutionBatchId = b.SolutionBatchId) as TestCount
        ///    FROM [dbo].[SolutionBatch] b
        ///    join [dbo].[SolutionRecipe] r on b.[SolutionRecipeId] = r.[SolutionRecip [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SolutionBatches {
            get {
                return ResourceManager.GetString("SolutionBatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT  t.[SolutionTestId]
        ///      , t.[SolutionBatchId]
        ///      , t.[DateTime]
        ///      , t.[SolutionRecipeId]
        ///      , t.[CMC]
        ///      , t.[DensitySetPoint]
        ///      , t.[ConsoleDensity]
        ///      , t.[pHSetPoint]
        ///      , t.[Viscoscity]
        ///      , t.[Temperature]
        ///      , t.[TitrationMLs]
        ///      , t.[NaOCl Pump Set]
        ///      , t.[NaOCl Flow]
        ///      , row_number() over (partition by cast(t.[DateTime] as date) order by t.[DateTime]) ReadingNumber
        ///      , t.[MeasuredDensity]
        ///      , t.[ConsolepH]
        ///      , t.[MeasuredpH [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SolutionTestByBatch {
            get {
                return ResourceManager.GetString("SolutionTestByBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to             SELECT b.[TensileSampleId]
        ///                  ,b.[Stamp]
        ///                  ,b.[ProductCodeId]
        ///                  ,b.[LineId]
        ///				  ,s.[LineNumber]
        ///                  ,b.[Tech]
        ///                  ,b.[Note]
        ///				  ,b.[Completed]
        ///                  ,r.[ProductCode]
        ///				  ,r.[ProductSpec]
        ///                  ,r.[ProductCode]+r.[ProductSpec] as CodeSpec
        ///				  ,r.[WetTensileMinimum]
        ///				  ,s.[UnitId]
        ///              FROM [dbo].[TensileSample] b
        ///              join [dbo].[Line] s on b.[LineId] = s.[ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TensileSampleById {
            get {
                return ResourceManager.GetString("TensileSampleById", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select  t.tensilesampleid
        ///,t.stamp
        ///,t.lineid
        ///,n.unitid
        ///,n.linenumber
        ///,t.productcodeid
        ///,t.note
        ///,t.[Completed]
        ///,t.tech
        ///,p.productcode
        ///,p.productspec
        ///,p.productcode+&apos; &apos;+p.productspec as codespec
        ///,p.wettensileminimum
        ///,(select count(s.tensiletestid) from tensiletest s where t.tensilesampleid = s.TensileSampleId) as TestCount
        ///from TensileSample t
        ///join ProductCode p on t.ProductCodeId = p.ProductCodeId
        ///join Line n on n.LineId = t.LineId.
        /// </summary>
        public static string TensileSamples {
            get {
                return ResourceManager.GetString("TensileSamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT t.[TensileTestId]
        ///      ,t.[TensileSampleId]
        ///      ,t.[Stamp]
        ///      ,t.[Average]
        ///      ,t.[Range]
        ///      ,t.[N]
        ///      ,t.[Tech]
        ///	  ,case when t.[Average] &gt;= p.WetTensileMinimum * 100 then &apos;true&apos; else &apos;false&apos; end as [Passed]
        ///	  ,row_number() over(order by t.[Stamp]) as TestNumber
        ///  FROM TensileTest t
        ///  join TensileSample s on t.TensileSampleId = s.TensileSampleId
        ///  join ProductCode p on s.ProductCodeId = p.ProductCodeId
        ///  where t.tensilesampleid = {0}.
        /// </summary>
        public static string TensileTestBySample {
            get {
                return ResourceManager.GetString("TensileTestBySample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT DISTINCT g.TestGroupId, g.TimeStamp 
        /// FROM dbo.TestGroup g
        /// JOIN dbo.LineTest t ON t.TestGroupId = g.TestGroupId
        /// JOIN dbo.line n ON t.LineId = n.LineId
        /// WHERE n.UnitId = @0
        /// ORDER BY g.TimeStamp
        /// .
        /// </summary>
        public static string TestGroupsByUnit {
            get {
                return ResourceManager.GetString("TestGroupsByUnit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP 1 g.TestGroupId, g.TimeStamp 
        /// FROM dbo.TestGroup g
        /// JOIN dbo.LineTest t ON t.TestGroupId = g.TestGroupId
        /// JOIN dbo.line n ON t.LineId = n.LineId
        /// WHERE n.UnitId = @0 AND g.TimeStamp &gt; (SELECT timestamp FROM dbo.TestGroup WHERE testgroupid = @1)
        /// ORDER BY g.TimeStamp DESC
        /// .
        /// </summary>
        public static string TestNextGroup {
            get {
                return ResourceManager.GetString("TestNextGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP 1 g.TestGroupId, g.TimeStamp		
        /// FROM dbo.TestGroup g
        /// JOIN dbo.LineTest t ON t.TestGroupId = g.TestGroupId
        /// JOIN dbo.line n ON t.LineId = n.LineId
        /// WHERE n.UnitId = @0 AND g.TimeStamp &lt; COALESCE((SELECT timestamp FROM dbo.TestGroup WHERE testgroupid = @1), &apos;9999-12-31 23:59:59.998&apos;)
        /// ORDER BY g.TimeStamp DESC.
        /// </summary>
        public static string TestPrevGroup {
            get {
                return ResourceManager.GetString("TestPrevGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        /// g.TestGroupId ,
        /// g.TimeStamp ,
        /// t.BeltSpeed ,
        /// t.CasingGlyc ,
        /// t.CasingMoist ,
        /// t.CasingTemp ,
        /// t.CMC ,
        /// t.Computer ,
        /// t.Cond ,
        /// t.Delm ,
        /// t.DryEndSpeed ,
        /// t.Gly ,
        /// t.HypoLevel ,
        /// t.LineId ,
        /// t.LineTestId ,
        /// t.Notes ,
        /// t.OilSetpoint ,
        /// t.OilActual ,
        /// t.pH ,
        /// t.Product ,
        /// t.StdSpeed ,
        /// t.SystemId ,
        /// t.TimeStamp ,
        /// t.Timing ,
        /// t.WetDoorNumber ,
        /// t.ZoneA ,
        /// t.ZoneB ,
        /// t.ZoneC ,
        /// n.LineNumber AS [LineNo]
        /// FROM dbo.TestGroup g
        /// JOIN dbo.LineTest t ON t.TestGroupId = g.TestG [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TestsByGroup {
            get {
                return ResourceManager.GetString("TestsByGroup", resourceCulture);
            }
        }
    }
}
