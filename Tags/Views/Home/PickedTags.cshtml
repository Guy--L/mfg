@model Tags.Models.Chart

@{
    ViewBag.Title = "Tags from "+ViewData["Channel"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var list = ViewData["Channel"].ToString().Replace(",", "<br/>");
}

@section actions {
    <li>
        <i class="print fa fa-print"> print</i>
        <div class="btn btn-xs btn-success datadownload"><i class="fa fa-cloud-download"></i>&nbsp;Download Data</div>
    </li>
}
<h3>@Html.Raw(list)</h3>
<div id="ChartContainer"></div>

@section scripts {
    <script type="text/javascript" src='@Url.Content("~/Scripts/flotr2.min.js")'></script>
    <script type="text/javascript" src='@Url.Content("~/Scripts/html2canvas.js")'></script>
    <script type="text/javascript" src='@Url.Content("~/Scripts/jquery.resize.min.js")'></script>
    <script type="text/javascript">
        $(function () {
            $('.datadownload').on('click', function (e) {
                location.href = '@Url.Action("GetSpreadSheet", "Home", null, Request.Url.Scheme)';
            });

            $('#ChartContainer').parent().addClass('chart-container');

            $('.print').on('click', function () {
                html2canvas($("#ChartContainer"), {
                    onrendered: function (canvas) {
                        $("#page").hide();
                        document.body.appendChild(canvas);
                        window.print();
                        $('canvas').remove();
                        $("#page").show();
                    }
                });

            });

            var container = document.getElementById('ChartContainer');

            @Html.Raw(Model.series)
        
            @if (!Model.isEmpty)
            {
            <text>
            var
                options,
                graph,
                o;

            options = {
                shadowSize: 0,
                crosshair: { mode: 'xy' },
                xaxis : {
                    mode: 'time',
                    timeMode: 'local',
                    labelsAngle: 45,
                    autoscale: true,
                    autoscaleMargin: 0.1
                },
                @Html.Raw(Model.axes)
                selection : {
                    mode : 'xy'
                },
                HtmlText: false,
                mouse: {
                    track: true,
                    lineColor: 'purple',
                    relative: true,
                    position: 'ne',
                    sensibility: 2, // => The smaller this value, the more precise you've to point
                    trackDecimals: 2,
                    trackFormatter: function (obj) { return shortStamp(obj.x) + ', ' + obj.y; }
                }
            };

            function shortStamp(d)
            {
                var m = ''+d.getMinutes();
                return '' + (d.getMonth() + 1) + '/' + d.getDate() + ' ' + d.getHours() + ':' + ('0' + m).slice(-2);
            }

            // Draw graph with default options, overwriting with passed options
            function drawGraph (opts) {

                // Clone the options, so the 'options' variable always keeps intact.
                o = Flotr._.extend(Flotr._.clone(options), opts || {});

                // Return a new graph.
                var f = Flotr.draw(
                    container,
                    [ @Html.Raw(Model.charts) ],
                    o
                );

                $('div#completed').html('<small>drawn at ' + (new Date())+'</small>');
                return f;
            }

            graph = drawGraph();
            
            $('#ChartContainer').resize(function (e) {
                graph = drawGraph();
            });

            Flotr.EventAdapter.observe(container, 'flotr:select', function (area) {
                // Draw selected area
                graph = drawGraph({
                    xaxis: {
                        min: area.x1, max: area.x2, mode: 'time',
                        timeMode: 'local',
                        labelsAngle: 45,
                    },
                    yaxis : { min : area.y1, max : area.y2 }
                });
            });

            // When graph is clicked, draw the graph with default area.
            Flotr.EventAdapter.observe(container, 'flotr:click', function () { graph = drawGraph(); });
            </text>
            }
    });
    </script>
}
