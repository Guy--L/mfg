@model Tags.Models.Chart

@{
    ViewBag.Title = "Tags from "+ViewData["Channel"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var list = ViewData["Channel"].ToString().Replace(",", "<br/>");
}

<h3>@Html.Raw(list)</h3>
<div id="ChartContainer"></div>

@section scripts {
    <script type="text/javascript" src='@Url.Content("~/Scripts/flotr2.min.js")'></script>
    <script type="text/javascript" src='@Url.Content("~/Scripts/html2canvas.js")'></script>
    <script type="text/javascript" src='@Url.Content("~/Scripts/jquery.resize.min.js")'></script>
    <script type="text/javascript">
        var noReset = false;
        $(function () {
            setTimeout(function () {
                console.log("k");
                location.href = '@Url.Action("RefreshMonitor", "Home", null, Request.Url.Scheme)';
            }, 60000); // Re-start connection after 1 second


            $('#ChartContainer').parent().addClass('chart-container');

            var container = document.getElementById('ChartContainer');

            @Html.Raw(Model.series)
        
            @if (!Model.isEmpty)
            {
            <text>
            var
                options,
                graph,
                o;

            options = {
                shadowSize: 0,
                xaxis : {
                    mode: 'time',
                    timeMode: 'local',
                    labelsAngle: 45,
                    autoscale: true,
                    autoscaleMargin: 0.1
                },
                @Html.Raw(Model.axes)
                selection : {
                    mode : 'xy'
                },
                HtmlText: false
            };

            // Draw graph with default options, overwriting with passed options
            function drawGraph (opts) {

                // Clone the options, so the 'options' variable always keeps intact.
                o = Flotr._.extend(Flotr._.clone(options), opts || {});

                // Return a new graph.
                var f = Flotr.draw(
                    container,
                    [ @Html.Raw(Model.charts) ],
                    o
                );

                $('div#completed').html('<small>drawn at ' + (new Date())+'</small>');
                return f;
            }

            graph = drawGraph();
            
            $('#ChartContainer').resize(function (e) {
                graph = drawGraph();
            });

            Flotr.EventAdapter.observe(container, 'flotr:select', function (area) {
                // Draw selected area
                graph = drawGraph({
                    xaxis: {
                        min: area.x1, max: area.x2, mode: 'time',
                        timeMode: 'local',
                        labelsAngle: 45,
                    },
                    yaxis : { min : area.y1, max : area.y2 }
                });
                zoomarea = area;
            });
            </text>
            }
    });
    </script>
}
