
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `lab`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=GUYLISTER3546;Initial Catalog=mesdb;Integrated Security=True;Connection Timeout=120`
//     Schema:                 `dbo`
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using NPoco;

namespace Tags.Models
{
	public partial class labDB : Database
	{
		public labDB() 
			: base("lab")
		{
			CommonConstruct();
		}

		public labDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			labDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static labDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new labDB();
        }

		[ThreadStatic] static labDB _instance;
		
        protected override void OnBeginTransaction()
        {
                if (_instance==null)
                        _instance=this;
        }
                
        protected override void OnCompleteTransaction()
        {
                if (_instance==this)
                        _instance=null;
        }
				        
		public class Record<T> where T:new()
		{
			public static labDB repo { get { return labDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefaultById<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.SingleById<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

	[TableName("Line")]
	[PrimaryKey("LineId")]
	[ExplicitColumns]
    public partial class Line : labDB.Record<Line>  
    {		
		[Column] public int LineId { get; set; } 		
		[Column] public int? LineTankId { get; set; } 		
		[Column] public int UnitId { get; set; } 		
		[Column] public int LineNumber { get; set; } 		
		[Column] public int? SystemId { get; set; } 		
		[Column] public int StatusId { get; set; } 		
		[Column] public int ProductCodeId { get; set; } 		
		[Column] public DateTime Stamp { get; set; } 		
		[Column] public int PersonId { get; set; } 		
		[Column] public int ConversionId { get; set; } 	
	}

	[TableName("LineStatus")]
	[ExplicitColumns]
    public partial class LineStatus : labDB.Record<LineStatus>  
    {		
		[Column] public string INUNT { get; set; } 		
		[Column] public string INLIN { get; set; } 		
		[Column] public decimal INDAY { get; set; } 		
		[Column] public string INPRD { get; set; } 		
		[Column] public string CARTN { get; set; } 		
		[Column] public string INSID { get; set; } 		
		[Column] public decimal INLSQ { get; set; } 		
		[Column] public string INLST { get; set; } 		
		[Column] public string INREL { get; set; } 		
		[Column] public decimal INBSP { get; set; } 		
		[Column] public decimal INSAM { get; set; } 		
		[Column] public int LineId { get; set; } 		
		[Column] public string Status { get; set; } 		
		[Column] public string Reason { get; set; } 		
		[Column] public DateTime Stamp { get; set; } 		
		[Column] public int? ProductCodeId { get; set; } 	
	}

	[TableName("Unit")]
	[PrimaryKey("UnitId")]
	[ExplicitColumns]
    public partial class Unit : labDB.Record<Unit>  
    {		
		[Column] public int UnitId { get; set; } 		
		[Column("Unit")] public string _Unit { get; set; }
	
	}

}



